
// PIPE ENTRY AND BUFFER
template <typename T>
l1ct::tdr_regionizer::PipeEntry<T> l1ct::tdr_regionizer::Pipe<T>::popEntry() {
  assert(pipe_.size() > 0);
  auto last = pipe_.back();
  // shift one over
  for (size_t i = pipe_.size() - 1; i > 0; --i) {
    pipe_[i] = pipe_[i - 1];
  }
  pipe_[0].setInvalid();
  return last;
}

template <typename T>
void l1ct::tdr_regionizer::Pipe<T>::reset() {
  for (auto& pe : pipe_) {
    pe.setInvalid();
  }
}
// BUFFER ENTRY AND BUFFER
template <typename T>
l1ct::tdr_regionizer::BufferEntry<T>::BufferEntry(
    const T& obj, std::vector<size_t> srIndices, int glbeta, int glbphi, unsigned int clk)
    : obj_(obj), srIndices_(srIndices), glbeta_(glbeta), glbphi_(glbphi), linkobjclk_(clk) {
  objcount_ = 0;
}

template <typename T>
void l1ct::tdr_regionizer::Buffer<T>::addEntry(const T& obj, std::vector<size_t> srIndices,
                                               int glbeta, int glbphi,
                                               unsigned int dupNum, unsigned int ndup) {
  // dupNum is the duplicate number of this buffer (int range 0 to ndup_-1)
  data_.emplace_back(obj, srIndices, glbeta, glbphi, clkindex_ + dupNum);
  if (timeOfNextObject_ < 0) {
    timeOfNextObject_ = clkindex_ + dupNum;
  }
  clkindex_ += ndup;
}
//explicit for tracker to handle clocking
template <>
inline void l1ct::tdr_regionizer::Buffer<l1ct::TkObjEmu>::addEntry(const l1ct::TkObjEmu& obj,
                                                               std::vector<size_t> srIndices,
                                                               int glbeta,
                                                               int glbphi,
                                                               unsigned int dupNum,
                                                               unsigned int ndup) {
  assert(ndup == 1);  // don't currently support duplicates for tracks
  data_.emplace_back(obj, srIndices, glbeta, glbphi, clkindex_);
  if (timeOfNextObject_ < 0) {
    timeOfNextObject_ = clkindex_ + dupNum;
  }
  ++clkindex_;
  if (clkindex_ % 3 == 2)
    ++clkindex_;  //this is for tracker, could I get this generically maybe?
}


template <typename T>
void l1ct::tdr_regionizer::Buffer<T>::updateNextObjectTime(int currTime) {
  if (data_.size() > 0) {
    timeOfNextObject_ = std::max(front().clock(), static_cast<unsigned int>(currTime+1));
  } else {
    timeOfNextObject_ = -1;
  }
}

template <typename T>
l1ct::tdr_regionizer::PipeEntry<T> l1ct::tdr_regionizer::Buffer<T>::popEntry(int currTime) {
  if (front().nextSR() < 0) {
    // throwout
    pop();
    updateNextObjectTime(currTime);
    return l1ct::tdr_regionizer::PipeEntry<T>();
  }

  auto pipeEntry = l1ct::tdr_regionizer::PipeEntry<T>(front().obj(), front().nextSR(), front().glbEta(), front().glbPhi());
  front().incSR();
  if (front().nextSR() < 0) {
    // no more SRs for current front
    pop();
  }
  updateNextObjectTime(currTime);
  return pipeEntry;
}

// REGIONIZER
template <typename T>
l1ct::tdr_regionizer::Regionizer<T>::Regionizer(unsigned int neta,
                                                unsigned int nphi,
                                                unsigned int maxobjects,
                                                int bigRegionMin,
                                                int bigRegionMax,
                                                int nclocks,
                                                int ndup,
                                                bool debug)
    : neta_(neta),
      nphi_(nphi),
      maxobjects_(maxobjects),
      nsectors_(0),
      bigRegionMin_(bigRegionMin),
      bigRegionMax_(bigRegionMax),
      nclocks_(nclocks),
      ndup_(ndup),
      pipe_(neta * nphi / SRS_PER_RAM),
      smallRegionObjects_(neta * nphi),
      debug_(debug) {}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const std::vector<DetectorSector<T>>& sectors) {
  assert(nsectors_ == 0);
  for (const auto& sector : sectors) {
    if (isInBigRegionLoose(sector.region)) {
      sectors_.push_back(sector.region);
    }
  }
  nsectors_ = sectors_.size();
  buffers_.resize(nsectors_ * ndup_);
  if (debug_) {
    dbgCout() << "Number of sectors: " << nsectors_ << std::endl;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const DetectorSector<T>& sector) {
  assert(nsectors_ == 0);
  nsectors_ = 1;
  sectors_.push_back(sector.region);
  buffers_.resize(nsectors_ * ndup_);
  if (debug_) {
    dbgCout() << "Number of sectors: " << nsectors_ << std::endl;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::fillBuffers(const std::vector<DetectorSector<T>>& sectors) {
  setBuffers(fillLinks(sectors));
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::fillBuffers(const DetectorSector<T>& sector) {
  setBuffers(fillLinks(sector));
}

// this function is for sorting small regions first
// in eta first, then in phi
template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::sortRegionsRegular(size_t a, size_t b) const {
  // first do eta
  auto etaa = regions_[a].intEtaCenter();
  auto etab = regions_[b].intEtaCenter();
  if (etaa < etab) {
    return true;
  } else if (etaa > etab) {
    return false;
  }

  // if here, then etaa == etab, move to phi
  auto phia = regions_[a].intPhiCenter();
  auto phib = regions_[b].intPhiCenter();
  if (bigRegionMax_ < bigRegionMin_) {
    // the wraparound case
    if (phia > bigRegionMin_ && phib < bigRegionMax_) {
      return true;
    } else if (phib > bigRegionMin_ && phia < bigRegionMax_) {
      return false;
    }
  }
  // regular phi
  if (phia < phib) {
    return true;
  } else {
    return false;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initRegions(const std::vector<PFInputRegion>& regions) {
  regions_.resize(regions.size());
  for (unsigned int i = 0; i < regions.size(); ++i) {
    regions_[i] = regions[i].region;
    if (debug_) {
      dbgCout() << "region eta/phi: " << regions_[i].intEtaCenter() << " " << regions_[i].intPhiCenter()
                      << ", eta half width = " << regions_[i].hwEtaHalfWidth.to_int()
                      << ", phi half width = " << regions_[i].hwPhiHalfWidth.to_int()
                      << ", eta extra = " << regions_[i].hwEtaExtra.to_int()
                      << ", phi extra = " << regions_[i].hwPhiExtra.to_int() << std::endl;
    }
    if (isInBigRegion(regions_[i])) {
      regionmap_.push_back(i);
    }
  }
  assert(regionmap_.size() == neta_ * nphi_);
  std::sort(
      regionmap_.begin(), regionmap_.end(), [this](size_t a, size_t b) { return this->sortRegionsRegular(a, b); });
}

template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::isInBigRegion(const PFRegionEmu& reg) const {
  auto phi = reg.intPhiCenter();
  if (bigRegionMax_ < bigRegionMin_) {
    // the wraparound case
    return phi > bigRegionMin_ || phi < bigRegionMax_;
  } else {
    // the normal case
    return phi > bigRegionMin_ && phi < bigRegionMax_;
  }
}

template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::isInBigRegionLoose(const PFRegionEmu& reg) const {
  auto phi = reg.intPhiCenter();
  auto brmax = phi_wrap(bigRegionMax_ + reg.hwPhiHalfWidth.to_int() + reg.hwPhiExtra.to_int());
  auto brmin = phi_wrap(bigRegionMin_ - reg.hwPhiHalfWidth.to_int() - reg.hwPhiExtra.to_int());
  if (brmax < brmin) {
    // the wraparound case
    return phi > brmin || phi < brmax;
  } else {
    // the normal case
    return phi > brmin && phi < brmax;
  }
}

template <>
bool l1ct::tdr_regionizer::Regionizer<l1ct::TkObjEmu>::isInBigRegionLoose(const PFRegionEmu& reg) const {
  auto phi = reg.intPhiCenter();
  auto brmax = phi_wrap(bigRegionMax_ + 2 * reg.hwPhiHalfWidth.to_int());
  auto brmin = phi_wrap(bigRegionMin_ - 2 * reg.hwPhiHalfWidth.to_int());
  if (brmax < brmin) {
    // the wraparound case
    return phi > brmin || phi < brmax;
  } else {
    // the normal case
    return phi > brmin && phi < brmax;
  }
}

template <typename T>
std::vector<size_t> l1ct::tdr_regionizer::Regionizer<T>::getSmallRegions(int glbeta, int glbphi) const {
  std::vector<size_t> srIndices;  // the signal regions this object should go into

  // only iterate over regions covered by board
  for (size_t i = 0; i < regionmap_.size(); i++) {
    auto regionidx = regionmap_[i];
    int regphi = phi_wrap(glbphi - regions_[regionidx].intPhiCenter());
    int regeta = glbeta - regions_[regionidx].intEtaCenter();

    // add a special check to not have 3 eta regions
    if (regions_[regionidx].isInside(regeta, regphi) &&
        !(glbeta == 57 && regeta == -115 || glbeta == -57 && regeta == 115)) {
      srIndices.push_back(i);
    }
  }
  return srIndices;
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToBuffer(const T& obj, unsigned int buffer, unsigned int dupNum) {
  assert(buffer < numBuffers());
  const unsigned int sector = buffer / ndup_;
  auto glbphi = sectors_[sector].hwGlbPhiOf(obj).to_int();
  auto glbeta = sectors_[sector].hwGlbEtaOf(obj).to_int();
  // get the SR indices that this object should go into
  buffers_[buffer].addEntry(obj, getSmallRegions(glbeta, glbphi), glbeta, glbphi, dupNum, ndup_);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setBuffer(const std::vector<T>& objvec, unsigned int buffer) {
  assert(buffer < numBuffers());
  buffers_[buffer].reset();
  unsigned int dupNum = buffer % ndup_;
  for (unsigned int i = dupNum; i < objvec.size(); i += ndup_) {
    // if (debug_) {
    //   dbgCout() << "Buffer " << buffer << " dupNum " << dupNum << ": add obj, index " << i << " with pt = " << objvec[i].intPt() << std::endl;
    // }
    addToBuffer(objvec[i], buffer, dupNum);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setBuffers(const std::vector<std::vector<T>>&& objvecvec) {
  assert(numBuffers() == objvecvec.size() * ndup_);
  for (unsigned int buffer = 0; buffer < numBuffers(); buffer++) {
    setBuffer(objvecvec[buffer/ndup_], buffer);
  }
}


template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToSmallRegion(l1ct::tdr_regionizer::PipeEntry<T>&& pipeEntry) {
  if (pipeEntry.valid()) {

    auto rawObj = pipeEntry.obj();

    // in small region, the relative eta and phi are based on a different center, so need to update
    auto realRegIdx = regionmap_[pipeEntry.sr()];
    auto etaC = regions_[realRegIdx].intEtaCenter();
    auto phiC = regions_[realRegIdx].intPhiCenter();

    int locEta = pipeEntry.glbEta() - etaC;
    int locPhi = phi_wrap(pipeEntry.glbPhi() - phiC);

    rawObj.hwEta = locEta;
    rawObj.hwPhi = locPhi;

    smallRegionObjects_[pipeEntry.sr()].push_back(rawObj);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::run() {
  if (debug_) printDebug(0);
  for (int loopCount = 0; loopCount < 972; loopCount++) {  //this is the max allowable if nothing ever blocks

    // to exit early
    bool processedAll = true; // to be overwritten if not the case

    // handle the fifo buffers
    for (auto& buffer : buffers_) {
      if (buffer.timeOfNextObject() >= 0) {
        processedAll = false;
      }
      if (buffer.timeOfNextObject() == loopCount) {
        // time to handle the buffer entry
        auto nextSR = buffer.front().nextSR();
        if (nextSR < 0 || smallRegionObjects_[nextSR].size() == maxobjects_) {
          // throwout or SR full, just get rid of object
          buffer.popEntry(loopCount);
        } else {
          auto pipeIdx = pipeIndex(nextSR);
          if (pipe_.valid(pipeIdx)) {
            // The pipe already has an entry, so wait till space is available
            buffer.updateNextObjectTime(loopCount);
          } else {
            // put the value in the pipe
            pipe_.addEntry(pipeIdx, buffer.popEntry(loopCount));
          }
        }
      }

    }
    addToSmallRegion(pipe_.popEntry());

    if (debug_) printDebug(loopCount);

    // check ot see if you have processed all
    if (processedAll) {
      // first clear the pipe
      for (int i = 0; i < pipe_.size(); i++) {
        addToSmallRegion(pipe_.popEntry());
      }
      if (debug_) printDebug(1000);
      break;
    }
  }  //end main loop
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::reset() {
  for (auto& buffer : buffers_) {
    buffer.reset();
  }
  pipe_.reset();
  for (auto& smallRegionObject : smallRegionObjects_) {
    smallRegionObject.clear();
  }
}

template <typename T>
std::map<size_t, std::vector<T>> l1ct::tdr_regionizer::Regionizer<T>::fillRegions(bool doSort) {
  std::map<size_t, std::vector<T>> srMap;
  for (size_t sr = 0; sr < smallRegionObjects_.size(); sr++) {
    srMap[regionmap_[sr]] = smallRegionObjects_[sr];
    if (doSort) {
      std::sort(srMap[regionmap_[sr]].begin(), srMap[regionmap_[sr]].end(), std::greater<>());
    }
  }
  return srMap;
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::printDebug(int count) const {
  dbgCout() << "BUFFERS, (for " << numBuffers() << " buffers)" << std::endl;
  dbgCout() << count << "\tbuffer\titem\tpt\teta\tphi\tclock" << std::endl;
  for (unsigned int buffer = 0; buffer < numBuffers(); buffer++) {
    for (unsigned int j = 0; j < numEntries(buffer); j++) {
      dbgCout() << "\t" << buffer << "\t" << j << "\t" << buffers_[buffer].pt(j) << "\t" << buffers_[buffer].glbEta(j)
                << "\t" << buffers_[buffer].glbPhi(j)
                << "\t" << buffers_[buffer].clock(j) << std::endl;
    }
    dbgCout() << "-------------------------------" << std::endl;
  }
  dbgCout() << "SMALL REGIONS" << std::endl;
  for (unsigned int region = 0; region < neta_ * nphi_; region++) {
    dbgCout() << count << "\tregion\t\titem\tpt\tloceta\tlocphi" << std::endl;
    auto realRegIdx = regionmap_[region];
    auto etaC = regions_[realRegIdx].intEtaCenter();
    auto phiC = regions_[realRegIdx].intPhiCenter();
    for (unsigned int j = 0; j < smallRegionObjects_[region].size(); j++) {
      dbgCout() << "\t" << region << " (" << etaC << ", " << phiC << ")\t" << j << "\t"
                << smallRegionObjects_[region][j].intPt() << "\t"
                << smallRegionObjects_[region][j].intEta() << "\t"
                << smallRegionObjects_[region][j].intPhi() << std::endl;
    }
    dbgCout() << "-------------------------------" << std::endl;
  }
  dbgCout() << "TIMES" << std::endl;
  for (unsigned int i = 0; i < numBuffers(); i++) {
    dbgCout() << "  " << buffers_[i].timeOfNextObject();
  }
  dbgCout() << "\n-------------------------------" << std::endl;
}

// returns 2D arrays, sectors (links) first dimension, objects second
template <typename T>
std::vector<std::vector<T>> l1ct::tdr_regionizer::Regionizer<T>::fillLinks(const std::vector<DetectorSector<T>>& sectors) const {
  std::vector<std::vector<T>> links;

  if (maxobjects_ == 0) {
    return links;
  }
  //one link per sector
  for (const auto& sector : sectors) {
    if (isInBigRegionLoose(sector.region)) {
      links.emplace_back();
      for (unsigned int io = 0; io < sector.size() && io < nclocks_; io++) {
        links.back().push_back(sector[io]);
      }
    }
  }
  return links;
}

template <typename T>
std::vector<std::vector<T>> l1ct::tdr_regionizer::Regionizer<T>::fillLinks(const DetectorSector<T>& sector) const {
  std::vector<std::vector<T>> links;

  if (maxobjects_ == 0) {
    return links;
  }

  links.emplace_back();
  for (unsigned int io = 0; io < sector.size() && io < nclocks_; io++) {
    links.back().push_back(sector[io]);
  }
  return links;
}

