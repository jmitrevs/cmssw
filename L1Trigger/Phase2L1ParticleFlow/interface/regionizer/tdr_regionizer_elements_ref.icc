

template <typename T>
l1ct::tdr_regionizer::PipeObject<T>::PipeObject(
    const T& obj, std::vector<size_t> srIndices, int glbeta, int glbphi, unsigned int clk)
    : obj_(obj), srIndices_(srIndices), glbeta_(glbeta), glbphi_(glbphi), linkobjclk_(clk) {
  objcount_ = 0;
}

template <typename T>
void l1ct::tdr_regionizer::Pipe<T>::addObj(T obj, std::vector<size_t> srIndices, int glbeta, int glbphi, unsigned int dupNum, unsigned int ndup) {
  // dupNum is the duplicate number of this pipe (int range 0 to ndup_-1)
  data_.emplace_back(obj, srIndices, glbeta, glbphi, clkindex_ + dupNum);
  clkindex_ += ndup;
}
//explicit for tracker to handle clocking
template <>
inline void l1ct::tdr_regionizer::Pipe<l1ct::TkObjEmu>::addObj(l1ct::TkObjEmu obj,
                                                               std::vector<size_t> srIndices,
                                                               int glbeta,
                                                               int glbphi,
                                                               unsigned int dupNum,
                                                               unsigned int ndup) {
  assert(ndup == 1);  // don't currently support duplicates for tracks
  data_.emplace_back(obj, srIndices, glbeta, glbphi, clkindex_++);
  if (clkindex_ % 3 == 2)
    clkindex_++;  //this is for tracker, could I get this generically maybe?
}

template <typename T>
size_t l1ct::tdr_regionizer::Pipe<T>::getPipeIndexForObject(unsigned int index) {
  return getObj(index).getNextSRIndex();
}

template <typename T>
l1ct::tdr_regionizer::Regionizer<T>::Regionizer(unsigned int neta,
                                                unsigned int nphi,
                                                unsigned int nregions,
                                                unsigned int maxobjects,
                                                int bigRegionMin,
                                                int bigRegionMax,
                                                int nclocks,
                                                int ndup,
                                                bool debug)
    : neta_(neta),
      nphi_(nphi),
      nregions_(nregions),
      maxobjects_(maxobjects),
      nsectors_(0),
      bigRegionMin_(bigRegionMin),
      bigRegionMax_(bigRegionMax),
      nclocks_(nclocks),
      ndup_(ndup),
      debug_(debug) {
  smallRegionObjects_.resize(neta_ * nphi_);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const std::vector<DetectorSector<T>>& sectors) {
  assert(nsectors_ == 0);
  nsectors_ = sectors.size();
  sectors_.resize(nsectors_);
  pipes_.resize(nsectors_ * ndup_);
  for (unsigned int i = 0; i < nsectors_; ++i) {
    sectors_[i] = sectors[i].region;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const DetectorSector<T>& sector) {
  assert(nsectors_ == 0);
  nsectors_ = 1;
  sectors_.resize(1, sector.region);
  pipes_.resize(nsectors_ * ndup_);
}

// this function is for sorting small regions first
// in eta first, then in phi
template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::sortRegionsRegular(size_t a, size_t b) const {
  // first do eta
  auto etaa = regions_[a].intEtaCenter();
  auto etab = regions_[b].intEtaCenter();
  if (etaa < etab) {
    return true;
  } else if (etaa > etab) {
    return false;
  }

  // if here, then etaa == etab, move to phi
  auto phia = regions_[a].intPhiCenter();
  auto phib = regions_[b].intPhiCenter();
  if (bigRegionMax_ < bigRegionMin_) {
    // the wraparound case
    if (phia > bigRegionMin_ && phib < bigRegionMax_) {
      return true;
    } else if (phib > bigRegionMin_ && phia < bigRegionMax_) {
      return false;
    }
  }
  // regular phi
  if (phia < phib) {
    return true;
  } else {
    return false;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initRegions(const std::vector<PFInputRegion>& regions) {
  regions_.resize(regions.size());
  for (unsigned int i = 0; i < regions.size(); ++i) {
    regions_[i] = regions[i].region;
    if (debug_) {
      dbgCout() << "region eta/phi: " << regions_[i].intEtaCenter() << " " << regions_[i].intPhiCenter()
                      << ", eta half width = " << regions_[i].hwEtaHalfWidth.to_int()
                      << ", phi half width = " << regions_[i].hwPhiHalfWidth.to_int()
                      << ", eta extra = " << regions_[i].hwEtaExtra.to_int()
                      << ", phi extra = " << regions_[i].hwPhiExtra.to_int() << std::endl;
    }
    if (isInBigRegion(regions_[i])) {
      regionmap_.push_back(i);
    }
  }
  assert(regionmap_.size() == neta_ * nphi_);
  std::sort(
      regionmap_.begin(), regionmap_.end(), [this](size_t a, size_t b) { return this->sortRegionsRegular(a, b); });
}

template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::isInBigRegion(const PFRegionEmu& reg) const {
  auto phi = reg.intPhiCenter();
  if (bigRegionMax_ < bigRegionMin_) {
    // the wraparound case
    return phi > bigRegionMin_ || phi < bigRegionMax_;
  } else {
    // the normal case
    return phi > bigRegionMin_ && phi < bigRegionMax_;
  }
}

template <typename T>
std::vector<size_t> l1ct::tdr_regionizer::Regionizer<T>::getSmallRegions(int glbeta, int glbphi) const {
  std::vector<size_t> srIndices;  // the signal regions this object should go into

  // only iterate over regions covered by board
  for (size_t i = 0; i < regionmap_.size(); i++) {
    auto regionidx = regionmap_[i];
    int regphi = phi_wrap(glbphi - regions_[regionidx].intPhiCenter());
    int regeta = glbeta - regions_[regionidx].intEtaCenter();

    // add a special check to not have 3 eta regions
    if (regions_[regionidx].isInside(regeta, regphi) &&
        !(glbeta == 57 && regeta == -115 || glbeta == -57 && regeta == 115)) {
      srIndices.push_back(i);
    }
  }
  return srIndices;
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToPipe(const T& obj, unsigned int pipe, unsigned int dupNum) {
  assert(pipe < getSize());
  const unsigned int sector = pipe / ndup_;
  auto glbphi = sectors_[sector].hwGlbPhiOf(obj).to_int();
  auto glbeta = sectors_[sector].hwGlbEtaOf(obj).to_int();
  // get the SR indices that this object should go into
  std::vector<size_t> srIndices = getSmallRegions(glbeta, glbphi);
  if (!srIndices.empty()) {
    pipes_[pipe].addObj(obj, srIndices, glbeta, glbphi, dupNum, ndup_);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setPipe(const std::vector<T>& objvec, unsigned int pipe) {
  assert(pipe < getSize());
  pipes_[pipe].reset();
  unsigned int dupNum = pipe % ndup_;
  for (unsigned int i = dupNum; i < objvec.size(); i += ndup_) {
    addToPipe(objvec[i], pipe, dupNum);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setPipes(const std::vector<std::vector<T>>& objvecvec) {
  assert(getSize() == objvecvec.size() * ndup_);
  for (unsigned int pipe = 0; pipe < getSize(); pipe++) {
    setPipe(objvecvec[pipe/ndup_], pipe);
  }
}

// NEED TO CHECK CONSTANTS HERE
template <typename T>
int l1ct::tdr_regionizer::Regionizer<T>::getPipeTime(int linkIndex,
                                                     int linkTimeOfObject,
                                                     int linkAlgoClockRunningTime) {
  const int LINK_TO_ALGO_CLK_OFFSET = 2;  //13; // in units of algo clock
  int linkObjectArrival = (getSize() - 1 - linkIndex) + LINK_TO_ALGO_CLK_OFFSET + linkTimeOfObject;

  return (linkAlgoClockRunningTime < 0 || linkObjectArrival > linkAlgoClockRunningTime + 4)
             ? linkObjectArrival
             : (linkAlgoClockRunningTime + 4);
}

template <typename T>
int l1ct::tdr_regionizer::Regionizer<T>::popLinkObject(int linkIndex, int currentTimeOfObject) {
  auto& obj = pipes_[linkIndex].getObj();
  obj.incCount();
  if (obj.getCount() < obj.getSRIndices().size()) {
    // Continue working on the same object, since it goes in multiple SRs due to overlaps
    return currentTimeOfObject + 1;
  } else {
    // move on to next item in pipe
    pipes_[linkIndex].erase();
    //get time of next object
    if (getPipeSize(linkIndex)) {
      return getPipeTime(linkIndex, pipes_[linkIndex].getClock(), currentTimeOfObject);
    } else {  //no more objects on link
      return -1;
    }
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initTimes() {
  for (unsigned int pipe = 0; pipe < getSize(); ++pipe) {
    if (getPipeSize(pipe)) {
      timeOfNextObject_.push_back(timeNextFromIndex(pipe, -1));
    } else {
      timeOfNextObject_.push_back(-1);
    }
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToSmallRegion(unsigned int linkNum, unsigned int index) {
  auto pipeObj = pipes_[linkNum].getObj(index);

  auto rawObj = pipeObj.getRawObj();

  // in small region, the relative eta and phi are based on a different center, so need to update
  auto realRegIdx = regionmap_[pipeObj.getNextSRIndex()];
  auto etaC = regions_[realRegIdx].intEtaCenter();
  auto phiC = regions_[realRegIdx].intPhiCenter();

  int locEta = pipeObj.getGlbEta() - etaC;
  int locPhi = phi_wrap(pipeObj.getGlbPhi() - phiC);

  rawObj.hwEta = locEta;
  rawObj.hwPhi = locPhi;

  smallRegionObjects_[pipeObj.getNextSRIndex()].push_back(rawObj);

}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::run() {
  unsigned int loopCount = 0;
  if (debug_)
    printDebug(loopCount);
  while (loopCount < 972) {  //this is the max allowable if nothing ever blocks
    //init min time, pipe, and link index
    //      to find the target pipe currently with action
    int minPipeIndex = -1;
    int minLinkIndex = -1;
    int minTime = 0;

    //do pipe-full handling
    for (unsigned int pipe = 0; pipe < getSize(); ++pipe) {
      if (timeOfNextObject_[pipe] >= 0 && smallRegionObjects_[getPipeIndexForObject(pipe)].size() == maxobjects_) {
        //pipe is full so proceed to next object
        if (debug_) {
          dbgCout() << "pipe full for pipe " << pipe << " and pipe index " << getPipeIndexForObject(pipe) << std::endl;
        }

        //'remove' the selected object from its link
        timeOfNextObject_[pipe] = popLinkObject(pipe, timeOfNextObject_[pipe]);
      }  //end pipe-full handling loop
    }

    //do find object handling
    for (unsigned int pipe = 0; pipe < getSize(); ++pipe) {
      // dbgCout() << "secotor = " << pipe << ", timeOfNextObject_[pipe] = " << timeOfNextObject_[pipe]
      //   << ", minLinkIndex = " << minLinkIndex << ", minTime = " << minTime << ", minPipeIndex = " << minPipeIndex << std::endl;
      if (timeOfNextObject_[pipe] >= 0 && (minLinkIndex == -1 || timeOfNextObject_[pipe] < minTime)) {
        //found new 'selected' link object and pipe
        minPipeIndex = getHardwarePipeIndexForObject(pipe);
        minTime = timeOfNextObject_[pipe];
        minLinkIndex = pipe;
      } else if (getPipeSize(pipe) && minLinkIndex >= 0 &&
                 minPipeIndex == static_cast<int>(getHardwarePipeIndexForObject(pipe)) &&
                 timeOfNextObject_[pipe] == minTime) {
        //have pipe conflict, so need to wait a clock
        ++timeOfNextObject_[pipe];
      }
    }
    if (debug_) {
      dbgCout() << " After, minLinkIndex = " << minLinkIndex << ", minTime = " << minTime << ", minPipeIndex = " << minPipeIndex << std::endl;
    }
    if (minLinkIndex < 0)
      break;  //exit case

    //'put' object in small region
    addToSmallRegion(minLinkIndex);

    //'remove' the selected object from its link
    int nextTime = popLinkObject(minLinkIndex, timeOfNextObject_[minLinkIndex]);
    if (nextTime > nclocks_) {
      break;
    }
    timeOfNextObject_[minLinkIndex] = nextTime;
    ++loopCount;
  }  //end main loop

  if (debug_)
    printDebug(loopCount);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::reset() {
  for (auto& pipe : pipes_) {
    pipe.reset();
  }
  timeOfNextObject_.clear();
  for (auto& smallRegionObject : smallRegionObjects_) {
    smallRegionObject.clear();
  }
}

template <typename T>
std::map<size_t, std::vector<T>> l1ct::tdr_regionizer::Regionizer<T>::fillRegions(bool doSort) {
  std::map<size_t, std::vector<T>> srMap;
  for (size_t sr = 0; sr < smallRegionObjects_.size(); sr++) {
    srMap[regionmap_[sr]] = smallRegionObjects_[sr];
    if (doSort) {
      std::sort(srMap[regionmap_[sr]].begin(), srMap[regionmap_[sr]].end(), std::greater<>());
    }
  }
  return srMap;
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::printDebug(int count) const {
  dbgCout() << "PIPES, (for " << getSize() << " pipes)" << std::endl;
  dbgCout() << count << "\tpipe\titem\tpt\teta\tphi\tclock" << std::endl;
  for (unsigned int pipe = 0; pipe < getSize(); pipe++) {
    for (unsigned int j = 0; j < getPipeSize(pipe); j++) {
      dbgCout() << "\t" << pipe << "\t" << j << "\t" << pipes_[pipe].getPt(j) << "\t" << pipes_[pipe].getGlbEta(j)
                << "\t" << pipes_[pipe].getGlbPhi(j)
                << "\t" << pipes_[pipe].getClock(j) << std::endl;
    }
    dbgCout() << "-------------------------------" << std::endl;
  }
  dbgCout() << "SMALL REGIONS" << std::endl;
  for (unsigned int region = 0; region < neta_ * nphi_; region++) {
    dbgCout() << count << "\tregion\t\titem\tpt\tloceta\tlocphi" << std::endl;
    auto realRegIdx = regionmap_[region];
    auto etaC = regions_[realRegIdx].intEtaCenter();
    auto phiC = regions_[realRegIdx].intPhiCenter();
    for (unsigned int j = 0; j < smallRegionObjects_[region].size(); j++) {
      dbgCout() << "\t" << region << " (" << etaC << ", " << phiC << ")\t" << j << "\t"
                << smallRegionObjects_[region][j].intPt() << "\t"
                << smallRegionObjects_[region][j].intEta() << "\t"
                << smallRegionObjects_[region][j].intPhi() << std::endl;
    }
    dbgCout() << "-------------------------------" << std::endl;
  }
  dbgCout() << "TIMES" << std::endl;
  for (unsigned int i = 0; i < timeOfNextObject_.size(); i++) {
    dbgCout() << "  " << timeOfNextObject_[i];
  }
  dbgCout() << "\n-------------------------------" << std::endl;
}
